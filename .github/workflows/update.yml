name: AUR auto update

on:
  schedule:
    - cron: '53 7 * * *'
  push:
  workflow_dispatch:

jobs:

  update:
    runs-on: ubuntu-latest
    container:
      image: archlinux

    steps:
      - name: Get time
        id: time
        run: echo "::set-output name=time::$(date +%F-%T)"

      - name: Set up pacman package cache
        uses: actions/cache@master
        with:
          path: /var/cache/pacman/pkg
          key: pacman-package-x86_64-${{ steps.time.outputs.time }}
          restore-keys: pacman-package-x86_64-

      - name: Install runtime dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm --needed base-devel git jq nvchecker pacman-contrib openssh

      - uses: actions/checkout@master

      - name: Set up nvchecker cache
        uses: actions/cache@master
        with:
          path: cache
          key: nvchecker-${{ steps.time.outputs.time }}
          restore-keys: nvchecker-

      - name: Apply configurations
        run: |
          echo "${{ secrets.SSH_KEY }}" | install -Dm400 /dev/stdin /root/.ssh/aur
          cp ssh_config /root/.ssh/config
          useradd makepkg
          git config --global user.name 'Auto update bot'
          git config --global user.email 'auto-update-bot@jingbei.li'

      - name: Run nvchecker
        run: |
          mkdir -p cache
          sed "s/GITHUB_TOKEN/${{ secrets.GITHUB_TOKEN}}/" -i keyfile.toml
          sed "s/^#keyfile/keyfile/" -i nvchecker.toml
          nvchecker --logger both -c nvchecker.toml | tee nvchecker.log

      - name: Update AUR
        run: |
          grep '"event": "updated"' nvchecker.log | while read line
          do
            pkgbase=$(echo $line | jq -r '.name')
            newver=$(echo $line | jq -r '.version')
            [ -f update-scripts/${pkgbase}.sh ] && script=${pkgbase}.sh || script=default.sh
            sh -ex update-scripts/${script} ${pkgbase} ${newver}
            nvtake -c nvchecker.toml ${pkgbase}
          done
